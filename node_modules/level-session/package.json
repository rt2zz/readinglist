{
  "name": "level-session",
  "description": "A very fast and persistent web server session manager backed by LevelDB",
  "version": "0.1.1",
  "homepage": "https://github.com/rvagg/node-level-session",
  "authors": [
    "Rod Vagg @rvagg <rod@vagg.org> (https://github.com/rvagg)"
  ],
  "keywords": [
    "session",
    "sessions",
    "leveldb",
    "levelup"
  ],
  "main": "./level-session.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/rvagg/node-level-session.git"
  },
  "dependencies": {
    "generic-session": "~0.0.2",
    "level-ttl": "~0.0.0",
    "xtend": "~2.0.3"
  },
  "peerDependencies": {
    "levelup": ">0.8.0"
  },
  "devDependencies": {
    "tap": "*",
    "levelup": "~0.8.0",
    "request": "~2.12.0",
    "cookies": "~0.3.6",
    "rimraf": "~2.1.1",
    "async": "~0.1.22"
  },
  "scripts": {
    "test": "tap ./tests/*-test.js"
  },
  "license": "MIT",
  "readme": "# Level Session [![Build Status](https://secure.travis-ci.org/rvagg/node-level-session.png)](http://travis-ci.org/rvagg/node-level-session)\n\n![LevelDB Logo](https://twimg0-a.akamaihd.net/profile_images/3360574989/92fc472928b444980408147e5e5db2fa_bigger.png)\n\nA framework-agnostic, LevelDB-backed session manager for Node.js web servers. Provides very fast session data storage that persists across server restarts.\n\n**Compatible with Connect / Express middleware.**\n\nBacked by [Generic Session](https://github.com/rvagg/node-generic-session), the flexible session manager, Level Session gives you simple and speedy entry-level session management that allows you to scale when ready by switching the storage back-end of Generic Session to a more appropriate solution such as Redis.\n\nA LevelDB store can only be accessed by one process at a time so Level Session is not ideal for multi-process deployments.\n\nLevel Session uses [LevelUP](https://github.com/rvagg/node-levelup) for LevelDB access in Node.js.\n\n## Example\n\n```js\n// server.js\nvar http           = require('http')\n  , levelSession   = require('level-session')('/tmp/level_session_example.db')\n  , port           = 8080\n\nhttp.createServer(function (req, res) {\n  levelSession(req, res, function () {\n    var m\n\n    res.writeHead(200)\n\n    if (m = req.url.match(/^\\/get\\/(.+)/)) {\n      return req.session.get(m[1], function (err, data) {\n        res.end(JSON.stringify(data))\n      })\n    } else if (m = req.url.match(/^\\/set\\/([^\\/]+)\\/(.+)/)) {\n      return req.session.set(m[1], m[2], function () {\n        res.end(JSON.stringify(m[2]))\n      })\n    }\n\n    res.end('ERROR')\n  })\n}).listen(port)\n```\n\n```js\n// client.js\nvar request = require('request')\n  , jar     = request.jar()\n  , port    = 8080\n\n  , req     = function(url, cb) {\n      request({\n          url: 'http://localhost:' + port + '/' + url\n        , jar: jar\n        , json: true\n      }, cb)\n    }\n\nreq('set/foo/bar', function () {\n  console.log('Set foo = bar')\n  req('get/foo', function (e, res, body) {\n    console.log('Fetched foo =', body)\n  })\n})\n```\n\nRunning the two processes, we'll get:\n\n```sh\n$ node server.js &\n$ node client.js\nSet foo = bar\nFetched foo = bar\n```\n\nThis example is available in the *examples/* directory.\n\n## API\n\n### levelSession(options | location)\n\nWill create a new `LevelSession` instance, including an open LevelDB instance. You must provide a location for the LevelDB store, either as a `String` or on an `options` object with the property `'location'`. Alternatively you can provide an existing (open), LevelUP instance with the `'db'` property. Level Session can coexist with other uses of the same LevelUP by using [level-sublevel](https://github.com/dominictarr/level-sublevel) to operate in a *\"session\"* namespace.\n\nThe returned object can be used as a stand-alone filter or as a Connect / Express middleware.\n\nAny additional options you provide on an `options` object will be passed on to [Generic Session](https://github.com/rvagg/node-generic-session), these options include:\n\n#### Options:\n\n * `keys` (optional): either an `Array` of strings constituting your signing secret keys to be passed to a new instance of *Keygrip*, or you can pass in an instance of **Keygrip directly. If you pass in a `keys` instance, Keygrip must be installed.\n * `cookies` (optional): provide an instance of Cookies or a compatible cookie manager to use to manage cookies.\n * `expire` (optional, default: 2 weeks): number of seconds to set for the session cookie expiry.\n * `cookieName` (optional, default: `'s'`): the name of the session cookie.\n\nA `LevelSession` instance can be used as a filter / middleware in a Node.js server, invoke it as a function with the arguments: HTTP server `request`, HTTP server `response` and a `next` callback function to be called when LevelSession is finished. You will get a `session` object attached both `request` and `response`.\n\n#### close()\n\nEach `LevelSession` instance has a `close()` method that can be used to finalise and close all resources.\n\n-------------------------\n\n### levelSession.LevelStore(options | location)\n\nUse this to create a `LevelStore` instance that can be used directly with [Generic Session](https://github.com/rvagg/node-generic-session) as the `store` property. This provides the flexibility to invoke the session manager in the most appropriate way for your application.\n\n## Session API\n\n### session.get(key[, callback])\nGet the object stored as `key` for the current session in the session store. Automatically updates the expires time for this session.\n\nIf the `callback` is not provided then it will simply perform an expiry time update. If you just provide a `callback` and no `key` then it operates as an alias for `getAll()`.\n\n-------------------------\n\n### session.getAll(callback)\nGet all objects stored for the current session in the session store. Automatically updates the expires time for this session.\n\nIf the `callback` is not provided then it will simply perform an expiry time update.\n\n-------------------------\n\n### session.set(key[, value][, callback])\nSets `value` as `key` for the current session in the session store. Automatically updates the expires time for this session.\n\nIf `value` is omitted then `key` will be set to `null`. `callback` may be omitted and the operation will still be performed.\n\n-------------------------\n\n### session.del(key[, callback])\nDeletes the property `key` from the current session in the session store. Automatically updates the expires time for this session.\n\nIf `key` is omitted then it operates as an alias for `delAll()` (beware!). `callback` may be omitted and the operation will still be performed.\n\n-------------------------\n\n### session.delAll([callback])\nDeletes all data for the current session in the session store.\n\n`callback` may be omitted and the operation will still be performed.\n\n-------------------------\n\n### session.destroy([callback])\nDeletes all data for the current session in the session store and will also remove the session cookie from the client.\n\n`callback` may be omitted and the operation will still be performed.\n\n-------------------------\n\n## Licence\n\nLevel Session is Copyright (c) 2012 Rod Vagg [@rvagg](https://twitter.com/rvagg) and licenced under the MIT licence. All rights not explicitly granted in the MIT license are reserved. See the included LICENSE file for more details.\n",
  "readmeFilename": "README.md",
  "_id": "level-session@0.1.1",
  "dist": {
    "shasum": "d25c6876924a9e07fdd5e75359d292ae925654e2"
  },
  "_from": "level-session@",
  "_resolved": "https://registry.npmjs.org/level-session/-/level-session-0.1.1.tgz"
}
