{
  "name": "multilevel",
  "version": "4.1.0",
  "description": "A levelUp instance exposed over a streaming interface",
  "main": "index.js",
  "scripts": {
    "test": "tap test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/juliangruber/multilevel"
  },
  "keywords": [
    "levelup",
    "leveldb",
    "rpc",
    "stream"
  ],
  "author": {
    "name": "Julian Gruber",
    "email": "julian@juliangruber.com"
  },
  "license": "MIT",
  "dependencies": {
    "rpc-stream": "~1.0.3",
    "duplexer": "~0.0.3",
    "level-manifest": "~1.1.1",
    "msgpack-stream": "~0.0.3",
    "stream-combiner": "~0.0.2",
    "mux-demux": "~3.7.4"
  },
  "devDependencies": {
    "tap": "~0.4.0",
    "rimraf": "~2.1.4",
    "freeport": "~1.0.0",
    "level": "~0.8.0",
    "level-sublevel": "~4.5.0",
    "level-live-stream": "~1.4.4"
  },
  "testling": {
    "files": "test/*.js",
    "browsers": [
      "ie/6..latest",
      "chrome/20..latest",
      "firefox/10..latest",
      "safari/latest",
      "opera/11.0..latest",
      "iphone/6",
      "ipad/6"
    ]
  },
  "readme": "# multilevel\n\nExpose a levelDB over the network, to be used by multiple processes,\nwith [levelUp](https://github.com/rvagg/node-levelup)'s API.\n\n[![Build Status](https://travis-ci.org/juliangruber/multilevel.png?branch=master)](https://travis-ci.org/juliangruber/multilevel)\n\n## Usage\n\nexpose a db on the server:\n\n```js\nvar multilevel = require('multilevel')\nvar net = require('net')\nvar levelup = require('levelup')\n\nvar db = levelup('/my/db')\n\nnet.createServer(function (c) {\n  c.pipe(multilevel.server(db)).pipe(c)\n}).listen(3000)\n```\n\nand connect to it from the client:\n\n```js\nvar multilevel = require('multilevel')\nvar net = require('net')\n\nvar db = multilevel.client()\ndb.pipe(net.connect(3000)).pipe(db)\n  \n// asynchronous methods\ndb.get('foo', function () { /* */ })\n\n// streams\ndb.createReadStream().on('data', function () { /* */ })\n```\n\n## Compatibility\n\nmultilevel works in the browser too - via [browserify](https://github.com/substack/node-browserify) -\nand has full support for binary data. For getting a connection between browser and server I recommend\n[websocket-stream](https://github.com/maxogden/websocket-stream), which treats binary data well.\n\n## plugins\n\nYou can also expose custom methods and [sublevels](https://github.com/dominictarr/level-sublevel)\nwith `multilevel`!\n\nWhen using plugins, you must generate a manifest with \n[level-manifest](https://github.com/dominictarr/level-manifest)\nand require it in the client.\n\nHere's an example:\n\n``` js\n// server.js\n// create `db`\nvar levelup = require('levelup');\nvar db = levelup(PATH);\n\n// extend `db` with a foo(cb) method\ndb.methods = db.methods || {};\ndb.methods['foo'] = { type: 'async' };\ndb.foo = function (cb) {\n  cb(null, 'bar');\n};\n\n// now write the manifest to a file\nvar fs = require('fs');\nvar createManifest = require('level-manifest');\nfs.writeFileSync(__dirname + '/manifest.json', JSON.stringify(createManifest(db)));\n\n// then expose `db` via shoe or any other streaming transport.\nvar shoe = require('shoe');\nvar sock = shoe(function (stream) {\n  stream.pipe(multilevel.server(db)).pipe(stream);\n});\nsock.install(http.createServer(/* ... */), '/websocket');\n```\n\n[level-manifest](https://github.com/dominictarr/level-manifest) doesn't only\nsupport async functions but e.g. streams as well. For more, check its README.\n\nThen require the manifest on the client when bundling with browserify or in\nany other nodejs compatible environment.\n\n``` js\n// client.js\n// instantiate a multilevel client with the `manifest.json` we just generated\nvar multilevel = require('multilevel');\nvar manifest = require('./manifest.json');\nvar db = multilevel.client(manifest);\n\n// now pipe the db to the server\nvar stream = shoe('/websocket');\nstream.pipe(db).pipe(stream);\n\n// and you can call the custom `foo` method!\ndb.foo(function (err, res) {\n  console.log(res); // => \"bar\"\n});\n```\n\n## auth\n\nYou do not want to expose every database feature to every user,\nyet, you may want to provide some read-only access, or something.\n\nAuth controls may be injected when creating the server stream.\n\nAllow read only access, unless logged in as root.\n``` js\n//server.js\nvar db = require('./setup-db') //all your database customizations\nvar fs = require('fs')\nvar createManifest = require('level-manifest')\n\n//write out manifest\nfs.writeFileSync('./manifest.json', JSON.stringify(createManifest(db)))\n\nshoe(function (stream) {\n  stream.pipe(multilevel.server(db, {\n    auth: function (user, cb) {\n      if(user.name == 'root' && user.pass == 'toor') {\n        //the data returned will be attached to the mulilevel stream\n        //and passed to `access`\n        cb(null, {name: 'root'})\n      } else\n        cb(new Error('not authorized')\n    },\n    access: function (user, db, method, args) {\n      //`user` is the {name: 'root'} object that `auth`\n      //returned. \n\n      //if not a privliged user...\n      if(!user || user.name !== 'root') {\n        //do not allow any write access\n        if(/^put|^del|^batch|write/i.test(method))\n          throw new Error('read-only access')\n      }        \n    })\n  })).pipe(stream)\n})\n...\n```\n\nThe client authorizes by calling the auth method.\n\n``` js\nvar stream = shoe()\nvar db = multilevel.client()\nstream.pipe(db).pipe(stream)\n\ndb.auth({name: 'root', pass: 'toor'}, function (err, data) {\n  if(err) throw err\n  //later, they can sign out, too.\n\n  db.deauth(function (err) {\n    //signed out!\n  })\n})\n```\n\n## API\n\nThe exposed DB has the exact same API as\n[levelUp](https://github.com/rvagg/node-levelup).\nExcept that `close` closes the connection, instead of the database.\n`isOpen` and `isClose` tell you if you currently have a connection\nto the remote db.\n\n### multilevel.server(db, authOpts?)\n\nReturns a server-stream that exposes `db`, an instance of levelUp.\n`authOpts` is optional, it should match this:\n\n``` js\nvar authOpts = {\n  auth: function (userData, cb) {\n    //call back an error, if the user is not authorized.\n\n  },\n  access: function (userData, db, method, args) {\n    //throw if this user is not authorized for this action.\n  }\n}\n```\n### var db = multilevel.client(manifest?)\n\nReturns a `db` that is to be piped into a server-stream.\n`manifest` may be optionally be provided,\nwhich will allow client access to extensions.\n\n#### db.auth(data, cb)\n\nAuthorize with the server.\n\n#### db.deauth (cb)\n\nDeauthorize with the server.\n\n## Performance\n\nOn my macbook pro one multilevel server handles ~15k ops/s over a local tcp\nsocket.\n\n```js\n âˆ´  bench (master) : node index.js \n\nwriting \"1234567890abcdef\" 100 times\n\n native             : 2ms (50000 ops/s)\n multilevel direct  : 21ms (4762 ops/s)\n multilevel network : 14ms (7143 ops/s)\n\nwriting \"1234567890abcdef\" 1000 times\n\n native             : 12ms (83333 ops/s)\n multilevel direct  : 71ms (14085 ops/s)\n multilevel network : 77ms (12987 ops/s)\n\nwriting \"1234567890abcdef\" 10000 times\n\n native             : 88ms (113636 ops/s)\n multilevel direct  : 594ms (16835 ops/s)\n multilevel network : 590ms (16949 ops/s)\n\nwriting \"1234567890abcdef\" 100000 times\n\n native             : 927ms (107875 ops/s)\n multilevel direct  : 10925ms (9153 ops/s)\n multilevel network : 9839ms (10164 ops/s)\n```\n\n## Installation\n\n```bash\nnpm install multilevel\n```\n\n## Contributing\n\n```bash\n$ npm install\n$ npm test\n```\n\n## Contributors\n\n* [@juliangruber](https://github.com/juliangruber)\n* [@dominictarr](https://github.com/dominictarr)\n\n## License\n\n(MIT)\n\nCopyright (c) 2013 Julian Gruber &lt;julian@juliangruber.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n",
  "readmeFilename": "README.md",
  "_id": "multilevel@4.1.0",
  "dist": {
    "shasum": "dc90e927a67d05e6edc2a0c91e2e7a826318a95e"
  },
  "_from": "multilevel@",
  "_resolved": "https://registry.npmjs.org/multilevel/-/multilevel-4.1.0.tgz"
}
